---
export interface Props {
  title: string;
}

const {title} = Astro.props;
import { getUserPreferences } from "@lib/utils";
import "../global.css";
import '@unocss/reset/tailwind.css'
let userPreferences = getUserPreferences(Astro)

---

<!DOCTYPE html>
<html lang="en" class={`bg-base ${userPreferences?.prefersDark ? "dark" : userPreferences?.prefersDark === false ? "light" : ""}`}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/icons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/icons/favicon-16x16.png">
    <link rel="manifest" href="/icons/site.webmanifest">
    <link rel="mask-icon" href="/icons/safari-pinned-tab.svg" color="#ff691f">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#202020">
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <!-- todo: decide to keep or kill.  killing means I need to find another way to target mouse tool tip, and I don't like built in look atm regardless -->
    <link href="https://vjs.zencdn.net/8.0.4/video-js.css" rel="stylesheet" />
    <script src="/src/pwa.ts"></script>

    <!-- {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />} -->
  </head>
  <body class="font-sans leading-relaxed bg-base text-surface">
    <slot />
  </body>
</html>

<script>
// import type { userPreferencesI } from '@customTypes/types';
// import {getJsonFromDocCookie, setCookie} from '@lib/UI'
// const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
// const currCookie:userPreferencesI | null = getJsonFromDocCookie();
// const htmlElement = document.querySelector('html') as HTMLHtmlElement;

// function handleColorSchemeChange(e:MediaQueryListEvent) {
//   if (e.matches) {
//     htmlElement.classList.add('dark');
//     // write prefersDark True to cookie
//     const currCookie:userPreferencesI | null = getJsonFromDocCookie();
//     if (currCookie) {
//       currCookie.prefersDark = true
//     }
//   } else {
//     htmlElement.classList.remove('dark');
//     const currCookie:userPreferencesI | null = getJsonFromDocCookie();
//     if (currCookie) {
//       currCookie.prefersDark = false
//     }
//     // write prefersDark False to cookie
//   }
//   // write out cookie on change;
//   if (currCookie) {
//     setCookie(JSON.stringify(currCookie).trim())
//   } 
// }

// // Add the initial class based on the current color scheme
// if (darkModeMediaQuery.matches && !htmlElement.classList.contains('light')) {
//   htmlElement.classList.add('dark');
//   const currCookie:userPreferencesI = getJsonFromDocCookie() || {}
//       currCookie.prefersDark = true
//       setCookie(JSON.stringify(currCookie).trim())
// }

// // Add a listener to detect changes to the color scheme
// darkModeMediaQuery.addEventListener("change", handleColorSchemeChange);
</script>