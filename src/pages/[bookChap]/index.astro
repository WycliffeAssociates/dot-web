---
import Layout from "@layouts/Layout.astro";
import type {
  IVidWithCustom,
  cloudflareEnv,
  envPropsForPlayer,
} from "@customTypes/types";
import {
  groupObjectsByKey,
  getUserPreferences,
  getPreferredLangFromHeader,
  mutateSortVidsArray,
} from "@utils";
import {AppWrapper} from "@components/AppWrapper";
import {getPlaylistData} from "@lib/routes";

// FIGURE OUT WHICH PLAYLIST TO LOAD BASED ON DOMAIN
import config from "src/domainConfig.ts";

let originToMatch = import.meta.env.PROD ? Astro.url.origin : "tanzania";
console.log(originToMatch.includes("localhost"))
if (
  originToMatch.includes("dot-web.pages.dev") ||
  originToMatch.includes("127.0.0.1") ||
  originToMatch.includes("localhost")
) {
  originToMatch = "tanzania";
}

let matchingKey = Object.keys(config).find((key) =>
  originToMatch.toLowerCase().includes(key.toLowerCase())
);
if (!matchingKey || !config[matchingKey]) return Astro.redirect("404");
const configObj = config[matchingKey];
const playlist = configObj.playlist;
const {bookChap} = Astro.params;

if (!playlist) return Astro.redirect("404");

// Setup i18n
const preferredLocale = getPreferredLangFromHeader(Astro.request);
const initialDictModule = await import(`../../i18n/${preferredLocale}.ts`);
const initialDict = initialDictModule.default;
let videojsInitalDict;
try {
  let module = await import(
    `../../../node_modules/video.js/dist/lang/${preferredLocale}.json`
  );
  videojsInitalDict = module.default as Record<string, string>;
} catch (error) {
  console.error({error});
}

// DATA FETCHING
let userPreferences = getUserPreferences(Astro);
let data = await getPlaylistData(Astro.url.origin, playlist);
if (!data) return Astro.redirect("404");

// DATA SHAPING
// type coercion here to add a few extra types below on this vids array.
const vids = data.videos as IVidWithCustom[];
if (!vids || !vids.length) {
  return new Response(null, {
    status: 404,
  });
}
const {sortedVids, filteredByMatchingReferenceId} = mutateSortVidsArray(vids);
const bucketized = groupObjectsByKey<IVidWithCustom, "book">(
  sortedVids,
  "book"
);
if (filteredByMatchingReferenceId.notMatching?.length) {
  bucketized.other = filteredByMatchingReferenceId.notMatching;
}
// ---ROUTING/INITIAL PROPS
//Regex = Start with any word or digit, then optional . separator, any number of optional digits (bc we want to match just a book e.g mat if given), and then another set of option digits.  Will match
// Luk, Luk.2, LUK.2.7, 2jn.1, luk27.  Even the last is fine without the period since we'll just treat the two matches as book/chap
const bookChapRegex = /^([\d\w]+)(?:\.)?(\d+)?(?:\.)?(\d+)?/i;
const routingParts = bookChap && bookChap.match(bookChapRegex);
const bookRouting = routingParts && routingParts?.[1]?.toUpperCase();
const chapRouting = routingParts && Number(routingParts?.[2]);
const verseRouting = (routingParts && routingParts?.[3]) || undefined;
const defaultBook =
  bookRouting && bucketized[bookRouting]
    ? bucketized[bookRouting]
    : bucketized[Object.keys(bucketized)[0]];

const defChapIdx = defaultBook.findIndex(
  (chap) => Number(chap.chapter) == Number(chapRouting)
);
const defaultChap = defChapIdx > -1 ? defaultBook[defChapIdx] : defaultBook[0];
const initialData = {vids: defaultBook, chap: defaultChap, verseRouting};
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=3600, s-maxage=86400, must-revalidate"
);

let cfEnv: envPropsForPlayer = {
  accountId: "",
  playerId: "",
};
if (import.meta.env.DEV) {
  (cfEnv.accountId = import.meta.env.ACCOUNT_ID),
    (cfEnv.playerId = import.meta.env.PLAYER_ID);
} else {
  const runtime = Astro.locals.runtime;
  cfEnv.accountId = runtime.env.ACCOUNT_ID;
  cfEnv.playerId = runtime.env.PLAYER_ID;
}
if (!cfEnv.accountId || !cfEnv.playerId) {
  return Astro.redirect("404");
}
---

<Layout
  title={playlist}
  initialDict={initialDict}
  preferredLocale={preferredLocale}
>
  <div class="grid grid-rows-[auto_auto_1fr] overflow-y-auto">
    <AppWrapper
      client:load
      userPreferences={userPreferences}
      initialData={initialData}
      playlist={playlist}
      vids={bucketized}
      locale={preferredLocale}
      initialDict={initialDict}
      videojsInitalDict={videojsInitalDict}
      playerEnv={cfEnv}
    />
  </div>
</Layout>
