---
import Layout from "@layouts/Layout.astro";
import type { IVidWithCustom } from "@customTypes/types";

import {
  groupObjectsByKey,
  getUserPreferences,
getPreferredLangFromHeader,
mutateSortVidsArray,
// getPreferredLangFromHeader
} from "@utils";
import { Header } from "@components/Header";
import { AppWrapper } from "@components/AppWrapper";
import { getPlaylistData } from "@lib/routes";
const {bookChap, playlist} = Astro.params;
import config from 'src/domainConfig.ts'
console.log({config})

if (!playlist) return Astro.redirect('404')

const preferredLocale = getPreferredLangFromHeader(Astro.request)
const initialDictModule = await import(`../../i18n/${preferredLocale}.ts`)
const initialDict = {
  [preferredLocale]: initialDictModule.default
}

//Regex = Start with any word or digit, then optional . separator, any number of optional digits (bc we want to match just a book e.g mat if given), and then another set of option digits.  Will match 
// Luk, Luk.2, LUK.2.7, 2jn.1, luk27.  Even the last is fine without the period since we'll just treat the two matches as book/chap
const bookChapRegex = /^([\d\w]+)(?:\.)?(\d+)?(?:\.)?(\d+)?/i
const routingParts = bookChap && bookChap.match(bookChapRegex);
const bookRouting = routingParts && routingParts?.[1]?.toUpperCase()
const chapRouting = routingParts && Number(routingParts?.[2])
const verseRouting = routingParts && routingParts?.[3] || undefined

let userPreferences = getUserPreferences(Astro)
let data = await getPlaylistData(Astro.url.origin, playlist)
if (!data) return Astro.redirect('404')
// type coercion here to add a few extra types below on this vids array. 
const vids = data.videos as IVidWithCustom[]
if (!vids || !vids.length) {
  return new Response(null, {
    status: 404
  })
}
const {sortedVids, filteredByMatchingReferenceId} = mutateSortVidsArray(vids)
const bucketized = groupObjectsByKey<IVidWithCustom, "book">(sortedVids, "book");
bucketized.other = filteredByMatchingReferenceId.notMatching
// const chapRouting = routingParts && routingParts?.[2]
// const verseRouting = routingParts && routingParts?.[3]
const defaultBook = bookRouting && bucketized[bookRouting] ? 
      bucketized[bookRouting] :
      bucketized[Object.keys(bucketized)[0]];

const defChapIdx = defaultBook.findIndex(chap => Number(chap.chapter) == Number(chapRouting))


const defaultChap = defChapIdx > -1 ?  defaultBook[defChapIdx]: defaultBook[0]

const initialData = {vids: defaultBook, chap: defaultChap, verseRouting}
console.log(Astro.url.origin)
---

<Layout title="Experiments">
	<div class="">
		<Header client:idle prefersDark={userPreferences?.prefersDark}/>
  <div
    class="grid grid-rows-[auto_auto_1fr] overflow-y-auto"
  
  >
      <AppWrapper client:load userPreferences={userPreferences} initialData={initialData} playlist={playlist} vids={bucketized} locale={preferredLocale} initialDict={initialDict}/>
 </div> 
</div> 
</Layout>


<!-- <script define:vars={{ myPlayerUrl }} is:inline src={myPlayerUrl}></script> -->
