---
// home page
import Layout from "@layouts/Layout.astro";
import type { IVidWithCustom } from "@customTypes/types";

import {
groupObjectsByKey,
getUserPreferences,
getPreferredLangFromHeader,
mutateSortVidsArray,
// getPreferredLangFromHeader
} from "@utils";
import { Header } from "@components/Header";
import { AppWrapper } from "@components/AppWrapper";
import { getPlaylistData } from "@lib/routes";

// FIGURE OUT WHICH PLAYLIST TO LOAD BASED ON DOMAIN
import config from 'src/domainConfig.ts'
let originToMatch = import.meta.env.PROD ? Astro.url.origin : "benin";
if (originToMatch.includes("dot-web.pages.dev") || originToMatch.includes("127.0.0.1") || originToMatch.includes("localhost") ) {
  originToMatch = 'benin'
}
let matchingKey = Object.keys(config).find(key => originToMatch.toLowerCase().includes(key.toLowerCase()));
if (!matchingKey || !config[matchingKey]) return Astro.redirect('404')
const configObj = config[matchingKey]
const playlist = configObj.playlist;
if (!playlist) return Astro.redirect('404')


// SETUP I18N
const preferredLocale = getPreferredLangFromHeader(Astro.request)
const initialDictModule = await import(`../i18n/${preferredLocale}.ts`)
const initialDict = {
  [preferredLocale]: initialDictModule.default
}
// import videojs from 'video.js'
let videojsInitalDict;

try {
  let module = await import (`../../node_modules/video.js/dist/lang/${preferredLocale}.json`) 
    videojsInitalDict = module.default as Record<string, string>;
} catch (error) {
  console.error({error})
}

// DATA FETCHING
let userPreferences = getUserPreferences(Astro)
let data = await getPlaylistData(Astro.url.origin, playlist)
if (!data) return Astro.redirect('404')

// DATA SHAPING
// type coercion here to add a few extra types below on this vids array. 
const vids = data.videos as IVidWithCustom[]
if (!vids || !vids.length) {
  return new Response(null, {
    status: 404
  })
}
const {sortedVids, filteredByMatchingReferenceId} = mutateSortVidsArray(vids)
const bucketized = groupObjectsByKey<IVidWithCustom, "book">(sortedVids, "book");

if (filteredByMatchingReferenceId.notMatching?.length) {
  bucketized.other = filteredByMatchingReferenceId.notMatching
}



// const chapRouting = routingParts && routingParts?.[2]
// const verseRouting = routingParts && routingParts?.[3]
const defaultBook =  bucketized[Object.keys(bucketized)[0]];
const defaultChap =  defaultBook[0]

const initialData = {vids: defaultBook, chap: defaultChap, verseRouting:undefined}
// Would cache more aggressivley, but brigthcove videop playback urls are not static.  Cache for 1 hours at a time in browser (in case some) (in case someone caches close to the time that bc cdn changes urls), and then cache on cdn for 1 day at a time. 
Astro.response.headers.set('Cache-Control', 'public, max-age=3600, s-maxage=86400, must-revalidate');

---

<Layout title={`DOT ${playlist}`}>
  <div
    class="grid grid-rows-[auto_auto_1fr] overflow-y-auto"
  >
      <AppWrapper client:load userPreferences={userPreferences} initialData={initialData} playlist={playlist} vids={bucketized} locale={preferredLocale} initialDict={initialDict} videojsInitalDict={videojsInitalDict}/>
 </div> 
</Layout>
